#!/usr/bin/env python3

import argparse
import tomllib

palette_colors = [
    'black', 'red', 'green', 'yellow',
    'blue', 'magenta', 'cyan', 'white'
]


def get_parser():
    parser = argparse.ArgumentParser(prog='alacritty2ghostty',
                                    description='Convert alacritty themes 2 ghostty ones')
    
    parser.add_argument('filename')
    parser.add_argument('-c', '--comments', action='store_true', help='Generate output with comments?')

    return parser.parse_args()


def create_ghostty_scheme(data: dict) -> dict:
    colors = data['colors']
    
    ghostty_scheme = {}
    opt = lambda scheme, key: scheme[key] if key in scheme else None

    if 'primary' in colors:
        primary = colors['primary']
        ghostty_scheme['background'] = opt(primary, 'background')
        ghostty_scheme['foreground'] = opt(primary, 'foreground')

    if 'normal' in colors:
        normal = colors['normal']

        for i, color in enumerate(palette_colors):
            ghostty_scheme[f'palette__{str(i)}'] = opt(normal, color)

    if 'bright' in colors:
        bright = colors['bright']

        for i, color in enumerate(palette_colors):
            ii = i + 8
            ghostty_scheme[f'palette__{str(ii)}'] = opt(bright, color)

    return ghostty_scheme


def write_ghostty_scheme_keypair(key: str, val: str) -> str:
    splitted = key.split('__')

    if len(splitted) == 1:
        return f"{key} = {val}"
    
    keyname, index = splitted

    return f"{keyname} = {str(index)}={val}"


def gen_comments(offset: int, idx: int) -> str:
    x = idx - offset
    bright_color = False

    if x >= len(palette_colors):
        bright_color = True
        x -= len(palette_colors)

    return '\n# {}{}\n'.format(
        'light ' if bright_color else '',
        palette_colors[x]
    )


def convert2ghostty(data: dict, comments: bool) -> str:
    scheme = create_ghostty_scheme(data)
    result = ''
    offset = 0

    for i, (key, val) in enumerate(scheme.items()):
        if len(key.split('__')) == 1 and comments:
            offset += 1
        elif comments:
            result += gen_comments(offset, i)

        result += write_ghostty_scheme_keypair(key, val)
        result += '\n'

    return result


def read_file(filename: str, comments: bool):
    with open(filename, 'rb') as stream:
        data = tomllib.load(stream)

    print(convert2ghostty(data, comments=comments))


def main():
    args = get_parser()
    read_file(args.filename, comments=args.comments)


if __name__ == '__main__':
    main()