#!/usr/bin/env python3

import os
import re
import random
import string
import sys
import http.client
import argparse
import tomllib
import uuid

from urllib.parse import urlparse

palette_colors = [
    'black', 'red', 'green', 'yellow',
    'blue', 'magenta', 'cyan', 'white'
]


def get_parser():
    parser = argparse.ArgumentParser(prog='alacritty2ghostty',
                                    description='Convert alacritty themes 2 ghostty ones')
    
    parser.add_argument('input')
    parser.add_argument('-c', '--comments', action='store_true', help='Generate output with comments?')

    return parser.parse_args()


def create_ghostty_scheme(data: dict) -> dict:
    colors = data['colors']
    
    ghostty_scheme = {}
    opt = lambda scheme, key: scheme[key] if key in scheme else None

    if 'primary' in colors:
        primary = colors['primary']
        ghostty_scheme['background'] = opt(primary, 'background')
        ghostty_scheme['foreground'] = opt(primary, 'foreground')

    if 'normal' in colors:
        normal = colors['normal']

        for i, color in enumerate(palette_colors):
            ghostty_scheme[f'palette__{str(i)}'] = opt(normal, color)

    if 'bright' in colors:
        bright = colors['bright']

        for i, color in enumerate(palette_colors):
            ii = i + 8
            ghostty_scheme[f'palette__{str(ii)}'] = opt(bright, color)

    return ghostty_scheme


def write_ghostty_scheme_keypair(key: str, val: str) -> str:
    splitted = key.split('__')

    if len(splitted) == 1:
        return f"{key} = {val}"
    
    keyname, index = splitted

    return f"{keyname} = {str(index)}={val}"


def gen_comments(offset: int, idx: int) -> str:
    x = idx - offset
    bright_color = False

    if x >= len(palette_colors):
        bright_color = True
        x -= len(palette_colors)

    return '\n# {}{}\n'.format(
        'light ' if bright_color else '',
        palette_colors[x]
    )


def convert2ghostty(data: dict, comments: bool) -> str:
    scheme = create_ghostty_scheme(data)
    result = ''
    offset = 0

    for i, (key, val) in enumerate(scheme.items()):
        if len(key.split('__')) == 1 and comments:
            offset += 1
        elif comments:
            result += gen_comments(offset, i)

        result += write_ghostty_scheme_keypair(key, val)
        result += '\n'

    return result


def read_file(filename: str, comments: bool):
    with open(filename, 'rb') as stream:
        data = tomllib.load(stream)

    print(convert2ghostty(data, comments=comments))


def is_url(url: str) -> bool:
    regex = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  # ...or ipv4
        r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  # ...or ipv6
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if re.match(regex, url):
        parsed_url = urlparse(url)
        return all([parsed_url.scheme, parsed_url.netloc])
    
    return False


def from_url(url: str) -> str:
    try:
        parsed_url = urlparse(url)
        host = parsed_url.netloc
        path = parsed_url.path or '/'

        if parsed_url.scheme == 'http':
            conn = http.client.HTTPConnection(host)
        elif parsed_url.scheme == 'https':
            conn = http.client.HTTPSConnection(host)
        else:
            print('Unsupported URL scheme')
            return None
        
        conn.request('GET', path)
        response = conn.getresponse()

        if response.status == 200:
            content = response.read().decode('utf-8')
        else:
            sys.stderr.write(f"Failed to fetch from URL {url} ({response.status})\n")
            return None
    except Exception as err:
        sys.stderr.write(f"An error ocurred: {err}\n")
        return None 
    finally:
        conn.close()

    filename = '{}.tmp'.format(uuid.uuid4())

    try:
        with open(filename, 'w') as file:
            file.write(content)
    except Exception as err:
        sys.stderr.write(f'Unable to write tmpfile: {err}\n')
        return None
    
    return filename


def main():
    args = get_parser()

    inp = args.input

    if is_url(inp):
        filename = from_url(inp)

        if filename is None:
            sys.exit(1)
            return

        read_file(filename, comments=args.comments)
        os.remove(filename)
        return
    
    read_file(inp, comments=args.comments)


if __name__ == '__main__':
    main()